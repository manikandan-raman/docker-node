name: CICD

on:
  push:
    branches: [cicd-ec2-pipeline]

jobs:
  build-and-deploy:
    runs-on: [ubuntu-latest]
    env:
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_USERNAME: ${{ secrets.DB_DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_DB_PASSWORD }}
      DB_DATABASE: ${{ secrets.DB_DATABASE }}
      SERVER_HOST: ${{ secrets.SERVER_HOST }}
      SERVER_PORT: ${{ secrets.SERVER_PORT }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'ap-southeast-1'
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'
          
      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_NAME: node-docker
          IMAGE_TAG: v1
          REPOSITORY: node-docker-poc
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          echo "registry_url: ${{ steps.login-ecr.outputs.registry }}"
          docker compose build --no-cache
          docker tag $IMAGE_NAME:$IMAGE_TAG $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT    

      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
  
          # SSH into EC2 and run Docker commands
          sudo ssh -o StrictHostKeyChecking=no -i private_key.pem $HOST '
              export AWS_ACCESS_KEY_ID='"$AWS_ACCESS_KEY_ID"'
              export AWS_SECRET_ACCESS_KEY='"$AWS_SECRET_ACCESS_KEY"'
              aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin '"$ECR_REGISTRY"'
              sudo docker pull '"$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG"'
              sudo docker run -d --name my-container '"$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"'
              sudo rm -f private_key.pem
          '

